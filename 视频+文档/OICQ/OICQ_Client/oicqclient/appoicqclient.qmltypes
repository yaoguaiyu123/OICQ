import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "controller.h"
        name: "Controller"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["oicqclient/Controller 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Method {
            name: "updateMessageModel"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "sendMessage"
            Parameter { type: "QString" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "downloadFileRequest"
            Parameter { name: "friendiIndex"; type: "int" }
            Parameter { name: "messageIndex"; type: "int" }
            Parameter { name: "filepath"; type: "QString" }
        }
        Method {
            name: "updateMyHead"
            Parameter { type: "QString" }
        }
        Method {
            name: "cancelUploadOrDownload"
            Parameter { name: "friendIndex"; type: "int" }
            Parameter { name: "messageIndex"; type: "int" }
        }
        Method {
            name: "currentWindowImages"
            type: "QString"
            isList: true
            Parameter { name: "friendIndex"; type: "int" }
            Parameter { name: "messageIndex"; type: "int" }
        }
        Method {
            name: "choseAddFriend"
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method { name: "connectToServer" }
        Method {
            name: "loginToServer"
            Parameter { name: "accountId"; type: "qlonglong" }
            Parameter { name: "password"; type: "QString" }
            Parameter { name: "msgType"; type: "int" }
        }
        Method {
            name: "sendAddFriendRequest"
            Parameter { name: "friendId"; type: "qlonglong" }
            Parameter { name: "msgType"; type: "int" }
        }
    }
    Component {
        file: "framelesswindow.h"
        name: "FramelessWindow"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["oicqclient/FramelessWindow 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "movable"
            type: "bool"
            read: "movable"
            write: "setMovable"
            notify: "movableChanged"
            index: 0
        }
        Property {
            name: "resizable"
            type: "bool"
            read: "resizable"
            write: "setResizable"
            notify: "resizableChanged"
            index: 1
        }
        Signal { name: "movableChanged" }
        Signal { name: "resizableChanged" }
        Method { name: "toggleMaximizeRestore" }
    }
    Component {
        file: "friendmodel.h"
        name: "FriendModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["oicqclient/FriendModel 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "currentHeadpath"
            type: "QString"
            read: "currentHeadpath"
            notify: "currentHeadpathChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "currentName"
            type: "QString"
            read: "currentName"
            notify: "currentNameChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "myImagePath"
            type: "QString"
            read: "myImagePath"
            notify: "myImagePathChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "currentIndex"
            type: "int"
            read: "currentIndex"
            notify: "currentIndexChanged"
            index: 3
            isReadonly: true
        }
        Signal { name: "currentHeadpathChanged" }
        Signal { name: "currentNameChanged" }
        Signal { name: "myImagePathChanged" }
        Signal { name: "currentIndexChanged" }
        Signal { name: "initDataFinished" }
        Signal {
            name: "newMessage"
            Parameter { type: "int" }
        }
        Signal { name: "toManyFiles" }
        Signal {
            name: "sigdownloadFile"
            Parameter { name: "messageId"; type: "qlonglong" }
            Parameter { name: "from"; type: "qlonglong" }
            Parameter { name: "to"; type: "qlonglong" }
            Parameter { name: "filepath"; type: "QString" }
        }
        Signal {
            name: "siguploadFile"
            Parameter { name: "filePath"; type: "QString" }
            Parameter { name: "from"; type: "qlonglong" }
            Parameter { name: "to"; type: "qlonglong" }
            Parameter { name: "messageId"; type: "qlonglong" }
        }
        Method {
            name: "onLoginReturn"
            Parameter { name: "image"; type: "QImage" }
        }
    }
    Component {
        file: "friendrequestmodel.h"
        name: "FriendRequestModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["oicqclient/FriendRequestModel 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "messagemodel.h"
        name: "MessageModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["oicqclient/MessageModel 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Method {
            name: "updateHaveSizeAndRecvSize"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "haveSize"; type: "qlonglong" }
            Parameter { name: "totalSize"; type: "qlonglong" }
        }
    }
    Component {
        file: "qabstractsocket.h"
        name: "QAbstractSocket"
        accessSemantics: "reference"
        prototype: "QIODevice"
        Enum {
            name: "SocketType"
            values: [
                "TcpSocket",
                "UdpSocket",
                "SctpSocket",
                "UnknownSocketType"
            ]
        }
        Enum {
            name: "NetworkLayerProtocol"
            values: [
                "IPv4Protocol",
                "IPv6Protocol",
                "AnyIPProtocol",
                "UnknownNetworkLayerProtocol"
            ]
        }
        Enum {
            name: "SocketError"
            values: [
                "ConnectionRefusedError",
                "RemoteHostClosedError",
                "HostNotFoundError",
                "SocketAccessError",
                "SocketResourceError",
                "SocketTimeoutError",
                "DatagramTooLargeError",
                "NetworkError",
                "AddressInUseError",
                "SocketAddressNotAvailableError",
                "UnsupportedSocketOperationError",
                "UnfinishedSocketOperationError",
                "ProxyAuthenticationRequiredError",
                "SslHandshakeFailedError",
                "ProxyConnectionRefusedError",
                "ProxyConnectionClosedError",
                "ProxyConnectionTimeoutError",
                "ProxyNotFoundError",
                "ProxyProtocolError",
                "OperationError",
                "SslInternalError",
                "SslInvalidUserDataError",
                "TemporaryError",
                "UnknownSocketError"
            ]
        }
        Enum {
            name: "SocketState"
            values: [
                "UnconnectedState",
                "HostLookupState",
                "ConnectingState",
                "ConnectedState",
                "BoundState",
                "ListeningState",
                "ClosingState"
            ]
        }
        Enum {
            name: "SocketOption"
            values: [
                "LowDelayOption",
                "KeepAliveOption",
                "MulticastTtlOption",
                "MulticastLoopbackOption",
                "TypeOfServiceOption",
                "SendBufferSizeSocketOption",
                "ReceiveBufferSizeSocketOption",
                "PathMtuSocketOption"
            ]
        }
        Signal { name: "hostFound" }
        Signal { name: "connected" }
        Signal { name: "disconnected" }
        Signal {
            name: "stateChanged"
            Parameter { type: "QAbstractSocket::SocketState" }
        }
        Signal {
            name: "errorOccurred"
            Parameter { type: "QAbstractSocket::SocketError" }
        }
        Signal {
            name: "proxyAuthenticationRequired"
            Parameter { name: "proxy"; type: "QNetworkProxy" }
            Parameter { name: "authenticator"; type: "QAuthenticator"; isPointer: true }
        }
        Method { name: "_q_connectToNextAddress" }
        Method {
            name: "_q_startConnecting"
            Parameter { type: "QHostInfo" }
        }
        Method { name: "_q_abortConnectionAttempt" }
        Method { name: "_q_testConnection" }
    }
    Component {
        file: "qiodevice.h"
        name: "QIODevice"
        accessSemantics: "reference"
        prototype: "QObject"
        Signal { name: "readyRead" }
        Signal {
            name: "channelReadyRead"
            Parameter { name: "channel"; type: "int" }
        }
        Signal {
            name: "bytesWritten"
            Parameter { name: "bytes"; type: "qlonglong" }
        }
        Signal {
            name: "channelBytesWritten"
            Parameter { name: "channel"; type: "int" }
            Parameter { name: "bytes"; type: "qlonglong" }
        }
        Signal { name: "aboutToClose" }
        Signal { name: "readChannelFinished" }
    }
    Component {
        file: "qtcpsocket.h"
        name: "QTcpSocket"
        accessSemantics: "reference"
        prototype: "QAbstractSocket"
    }
    Component {
        file: "screencapture.h"
        name: "ScreenCapture"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["oicqclient/ScreenCapture 1.0"]
        exportMetaObjectRevisions: [256]
        Signal { name: "screenshotComplete" }
        Method {
            name: "printScreen"
            Parameter { name: "area"; type: "QRect" }
        }
        Method { name: "printFullScreen" }
    }
    Component {
        file: "tcpsocket.h"
        name: "TcpSocket"
        accessSemantics: "reference"
        prototype: "QTcpSocket"
        exports: ["oicqclient/TcpSocket 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Signal {
            name: "loginReturn"
            Parameter { name: "image"; type: "QImage" }
        }
        Signal {
            name: "loginReturnToQml"
            Parameter { type: "int" }
        }
        Signal {
            name: "friendListReturn"
            Parameter { type: "QJsonValue" }
            Parameter { type: "QImage"; isList: true }
        }
        Signal {
            name: "privateMessageReturn"
            Parameter { type: "QJsonValue" }
            Parameter { name: "images"; type: "QImage"; isList: true }
        }
        Signal {
            name: "updateHeadReturn"
            Parameter { type: "QImage" }
        }
        Signal {
            name: "addFriend"
            Parameter { type: "int" }
        }
        Signal {
            name: "addFriendRequest"
            Parameter { name: "jsonvalue"; type: "QJsonValue" }
            Parameter { name: "images"; type: "QImage"; isList: true }
        }
        Signal {
            name: "addFriendSingleRequest"
            Parameter { name: "jsonvalue"; type: "QJsonValue" }
            Parameter { name: "images"; type: "QImage"; isList: true }
        }
        Signal {
            name: "addFriendRes"
            Parameter { name: "jsonvalue"; type: "QJsonValue" }
            Parameter { type: "QImage"; isList: true }
        }
        Signal {
            name: "fileMessage"
            Parameter { name: "jsonvalue"; type: "QJsonValue" }
        }
        Signal {
            name: "historyMessageList"
            Parameter { name: "jsonvalue"; type: "QJsonValue" }
        }
        Method { name: "on_readyRead" }
    }
    Component {
        file: "textdocumenthandler.h"
        name: "TextDocumentHandler"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["oicqclient/TextDocumentHandler 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "hideTextDocument"
            type: "QQuickTextDocument"
            isPointer: true
            notify: "hideTextDocumentChanged"
            index: 0
        }
        Property {
            name: "textDocument"
            type: "QQuickTextDocument"
            isPointer: true
            notify: "textDocumentChanged"
            index: 1
        }
        Property { name: "cursorPosition"; type: "int"; notify: "cursorPositionChanged"; index: 2 }
        Signal { name: "hideTextDocumentChanged" }
        Signal { name: "textDocumentChanged" }
        Signal { name: "cursorPositionChanged" }
        Method { name: "insertScreenshot" }
        Method { name: "isTextContentEmpty"; type: "bool" }
        Method { name: "parseHtml" }
        Method {
            name: "parseHtmlWithEmoji"
            Parameter { name: "type"; type: "int" }
        }
    }
}
